import {
  AdMobBanner,
  AdMobInterstitial,
  PublisherBanner,
  AdMobRewarded
 } from 'expo-ads-admob';



onPress={this.showRewarded}

  showRewarded = async () => {
      AdMobRewarded.setAdUnitID('ca-app-pub-3940256099942544/5224354917'); // Test ID, Replace with your-admob-unit-id
      
      try{
        await AdMobRewarded.requestAdAsync();
        await AdMobRewarded.showAdAsync();
      }
      catch(e){
        console.log(e);
      }
    }



qr code generator : https://chart.googleapis.com/chart?chs=250x250&cht=qr&chl=I+Love+QR+Codes!++HI+MOM!&choe=UTF-8

Encode URI(text)








return(
      <SafeAreaView style={{backgroundColor: "#DDF4FF"}}> 
        <ScrollView style={{padding: 40}}>
          <Text style={{color: "#1D749D", fontSize: 30, fontWeight: "bold"}}>Nouvelle Attestation</Text>
          <Text style={{fontSize: 12}}>Remplissez vos informations et sélectionnez un motif.</Text>
          <View style={{marginVertical: 100}}>
            <TextInput
              label="Prénom:"
              mode="outlined"
              theme={{ colors: { primary: '#1D749D',underlineColor:'transparent'}}}
              style={{marginTop: 10}}
            />
            <TextInput
              label="Nom:"
              mode="outlined"
              theme={{ colors: { primary: '#1D749D',underlineColor:'transparent'}}}
              style={{marginTop: 20}}
            />
            <TextInput
              label="Date de naissance (jj/mm/aaaa):"
              onChangeText={text => {
                if (text.match(/^\d{2}$/) !== null) {
                  text = text + '/';
              } else if (text.match(/^\d{2}\/\d{2}$/) !== null) {
                  text = text + '/';
              }
              setText(text)
              }}
              value={text}
              maxLength = {10}
              keyboardType="numeric"
              mode="outlined"
              theme={{ colors: { primary: '#1D749D',underlineColor:'transparent'}}}
              style={{marginTop: 20}}
            />
            <TextInput
              label="Lieu de Naissance:"
              mode="outlined"
              theme={{ colors: { primary: '#1D749D',underlineColor:'transparent'}}}
              style={{marginTop: 20}}
            />
            <TextInput
              label="Addresse:"
              mode="outlined"
              theme={{ colors: { primary: '#1D749D',underlineColor:'transparent'}}}
              style={{marginTop: 20}}
            />
            <TextInput
              label="Ville:"
              mode="outlined"
              theme={{ colors: { primary: '#1D749D',underlineColor:'transparent'}}}
              style={{marginTop: 20}}
            />
            <TextInput
              label="Code Postal:"
              keyboardType="numeric"
              mode="outlined"
              theme={{ colors: { primary: '#1D749D',underlineColor:'transparent'}}}
              style={{marginTop: 20}}
            />

            <Text style={{fontSize:25, marginTop: 50}}>Motif de Sortie:</Text>
            <Dropdown
              label='Motif de Sortie'
              data={data}
            />
            <Text style={{fontSize:25, marginTop: 50}}>Date et Heure:</Text>
            <View style={{flexDirection:'row', flexWrap:'wrap', marginTop: 20}}>

              {show && (
                <DateTimePicker
                  testID="dateTimePicker"
                  timeZoneOffsetInMinutes={0}
                  value={date}
                  mode={mode}
                  is24Hour={true}
                  display="default"
                  onChange={onChange}
                />
              )}
              <Button style={{width: 150, marginHorizontal: 6, paddingVertical: 10}} color="#5AB7E3" mode="contained" onPress={showDatepicker}>
                {`${date.getDate() >= 10 ? "": "0"}${date.getDate()}/${date.getMonth() >= 10 ? "": "0"}${date.getMonth() + 1}/${date.getFullYear()}`}
              </Button>
            
              <Button style={{width: 150, marginHorizontal: 6, paddingVertical: 10}} color="#5AB7E3" mode="contained" onPress={showTimepicker}>
                {`${date.getHours() >= 10 ? "": "0"}${date.getHours()}h${date.getMinutes() >= 10 ? "": "0"}${date.getMinutes()}`}
              </Button>
            </View>
            <View style={{alignItems: "center", marginVertical: 30}}>
              <Button style={{width: 150, paddingVertical: 10}} color="#1D749D" mode="contained" onPress={()=>console.log("Hello Button")}>
                  Générer
                </Button>
            </View>
          </View>
        </ScrollView>
      </SafeAreaView>
    )









AdMobRewarded.addEventListener('interstitialDidClose', () => thi)=;













  const [date, setDate] = useState(new Date());
  const [mode, setMode] = useState('date');
  const [show, setShow] = useState(false);
  const [sdate, ssetDate] = useState(new Date());

  const onChange = (event, selectedDate) => {
    const currentDate = selectedDate || date;
    setShow(Platform.OS === 'ios');
    setDate(currentDate);
  };

  const showMode = currentMode => {
    setShow(true);
    setMode(currentMode);
  };

  const showDatepicker = () => {
    showMode('date');
  };

  const showTimepicker = () => {
    showMode('time');
  };
    let data = [{
      value: "Déplacements professionels",
    }, {
      value: 'Achats (1ère  nécessité/ Professionel)',
    }, {
      value: 'Consultations',
    },{
      value: 'Motif familial',
    }, {
      value: 'Assistance aux personnes vulnérables',
    }, {
      value: 'Garde d’enfants.',
    }, {
      value: 'Déplacement bref/Activité physique (1km)',
    }, {
      value: 'Convocation judiciaire ou administrative',
    }, {
      value: 'Missions d’intérêt général sur demande de l’autorité administrative',
    } ];
    const [text, setText] = useState('');






              <Button style={{width: 150, marginHorizontal: 6, paddingVertical: 10}} color="#5AB7E3" mode="contained" onPress={showDatepicker}>
                {`${this.state.date.getDate() >= 10 ? "": "0"}${this.state.date.getDate()}/${this.state.date.getMonth() >= 10 ? "": "0"}${this.state.date.getMonth() + 1}/${this.state.date.getFullYear()}`}
              </Button>
              <Button style={{width: 150, marginHorizontal: 6, paddingVertical: 10}} color="#5AB7E3" mode="contained" onPress={showTimepicker}>
                {`${this.state.date.getHours() >= 10 ? "": "0"}${this.state.date.getHours()}h${this.state.date.getMinutes() >= 10 ? "": "0"}${this.state.date.getMinutes()}`}
              </Button>












TEST





import React, { Component } from "react";
import { Button, View } from "react-native";
import { AdMobRewarded } from "expo-ads-admob";
export default class AdMobRewardedComponent extends Component {
state = {
loadedAd: false
};
async componentDidMount() {
AdMobRewarded.setTestDeviceID("EMULATOR");
AdMobRewarded.setAdUnitID("ca-app-pub-3940256099942544/5224354917"); // Test ID, Replace with your-admob-unit-id
AdMobRewarded.addEventListener("rewardedVideoDidRewardUser", () =>
console.log("Rewarded")
);
AdMobRewarded.addEventListener("rewardedVideoDidLoad", () => {
console.log("VideoLoaded");
this.setState({ loadedAd: true });
});
AdMobRewarded.addEventListener("rewardedVideoDidFailToLoad", () =>
console.log("FailedToLoad")
);
AdMobRewarded.addEventListener("rewardedVideoDidOpen", () =>
console.log("Opened")
);
AdMobRewarded.addEventListener("rewardedVideoDidClose", () => {
console.log("Closed");
this.setState({ loadedAd: false });
});
AdMobRewarded.addEventListener("rewardedVideoWillLeaveApplication", () =>
console.log("LeaveApp")
);
AdMobRewarded.addEventListener("rewardedVideoDidStart", () =>
console.log("Started")
);
await AdMobRewarded.requestAdAsync();
}
componentWillUnmount() {
AdMobRewarded.removeAllListeners();
}
_handlePress = async () => {
await AdMobRewarded.showAdAsync();
};
render() {
const { loadedAd } = this.state;
return (
  <View style={{margin: 100}}>
    <Button
    onPress={this._handlePress}
    title="Rewarded Video Ad"
    disabled={!loadedAd}
    />
</View>
);
}
}





//list: JSON.parse(await AsyncStorage.getItem('@Attestation:users')),



<Card>
        <View style={{flexDirection: "row"}}>
          <View style={{flex: 5}}> 
            <Card.Title title={this.props.profile.prenom} subtitle={this.props.profile.motif} />
            <Card.Content>
              <Text>
                {
                  `${this.datedate} à ${this.datehours}`
               }
              </Text>
              <Text>Motif</Text>
            </Card.Content>
            <Card.Actions>
              <Button>PDF</Button>
            </Card.Actions>
          </View>

          <View style={{flex: 5}}>
            <TouchableOpacity onPress={()=>this.props.showQr(this.qr_code)}>
            <Card.Cover style={{flex: 1}} source={{ uri: this.qr_code }} />
            </TouchableOpacity>
          </View>
        </View>
        </Card>








        <SwipeListView
          props = {this.props}
          datedate = {this.datedate}
          datehours = {this.datehours}
          qr_code = {this.qr_code}
          renderItem={(props, datedate, datehours, qr_code)=>{
            <Card>
              <View style={{flexDirection: "row"}}>
                <View style={{flex: 5}}> 
                  <Card.Title title={props.profile.prenom} subtitle={props.profile.motif} />
                  <Card.Content>
                    <Text>
                      {
                        `${datedate} à ${datehours}`
                    }
                    </Text>
                    <Text>Motif</Text>
                  </Card.Content>
                  <Card.Actions>
                    <Button>PDF</Button>
                  </Card.Actions>
                </View>

                <View style={{flex: 5}}>
                  <TouchableOpacity onPress={()=>props.showQr(qr_code)}>
                  <Card.Cover style={{flex: 1}} source={{ uri: qr_code }} />
                  </TouchableOpacity>
                </View>
              </View>
            </Card>
          }}
          
        />



date: new Date(),
      nom:"",
      prenom: "",
      dt_naissance:"",
      lieu_naissance:"",
      addresse: "", 
      ville:"",
      cd_postal:"",
      motif:"",
      showdate : false,
      text: '',



      2020-04-10T19:09:43.227Z





      (profile, reasons, dateactuel, dateactuelhours, datesortie, datesortieheures)